// Code generated by entc, DO NOT EDIT.

package ent

import (
	"GoBabel/Common/ent/call"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// Call is the model entity for the Call schema.
type Call struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CallQuery when eager-loading is set.
	Edges CallEdges `json:"edges"`
}

// CallEdges holds the relations/edges for other nodes in the graph.
type CallEdges struct {
	// Conference holds the value of the conference edge.
	Conference []*Conference
	// Participants holds the value of the participants edge.
	Participants []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ConferenceOrErr returns the Conference value or an error if the edge
// was not loaded in eager-loading.
func (e CallEdges) ConferenceOrErr() ([]*Conference, error) {
	if e.loadedTypes[0] {
		return e.Conference, nil
	}
	return nil, &NotLoadedError{edge: "conference"}
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e CallEdges) ParticipantsOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Call) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // started_at
		&sql.NullTime{},  // finished_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Call fields.
func (c *Call) assignValues(values ...interface{}) error {
	if m, n := len(values), len(call.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field started_at", values[0])
	} else if value.Valid {
		c.StartedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field finished_at", values[1])
	} else if value.Valid {
		c.FinishedAt = value.Time
	}
	return nil
}

// QueryConference queries the conference edge of the Call.
func (c *Call) QueryConference() *ConferenceQuery {
	return (&CallClient{config: c.config}).QueryConference(c)
}

// QueryParticipants queries the participants edge of the Call.
func (c *Call) QueryParticipants() *UserQuery {
	return (&CallClient{config: c.config}).QueryParticipants(c)
}

// Update returns a builder for updating this Call.
// Note that, you need to call Call.Unwrap() before calling this method, if this Call
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Call) Update() *CallUpdateOne {
	return (&CallClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Call) Unwrap() *Call {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Call is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Call) String() string {
	var builder strings.Builder
	builder.WriteString("Call(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", started_at=")
	builder.WriteString(c.StartedAt.Format(time.ANSIC))
	builder.WriteString(", finished_at=")
	builder.WriteString(c.FinishedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Calls is a parsable slice of Call.
type Calls []*Call

func (c Calls) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
