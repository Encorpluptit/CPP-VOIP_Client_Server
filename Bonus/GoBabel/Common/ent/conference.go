// Code generated by entc, DO NOT EDIT.

package ent

import (
	"GoBabel/Common/ent/conference"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Conference is the model entity for the Conference schema.
type Conference struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConferenceQuery when eager-loading is set.
	Edges ConferenceEdges `json:"edges"`
}

// ConferenceEdges holds the relations/edges for other nodes in the graph.
type ConferenceEdges struct {
	// Users holds the value of the users edge.
	Users []*User
	// Calls holds the value of the calls edge.
	Calls []*Call
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e ConferenceEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// CallsOrErr returns the Calls value or an error if the edge
// was not loaded in eager-loading.
func (e ConferenceEdges) CallsOrErr() ([]*Call, error) {
	if e.loadedTypes[1] {
		return e.Calls, nil
	}
	return nil, &NotLoadedError{edge: "calls"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Conference) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Conference fields.
func (c *Conference) assignValues(values ...interface{}) error {
	if m, n := len(values), len(conference.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	return nil
}

// QueryUsers queries the users edge of the Conference.
func (c *Conference) QueryUsers() *UserQuery {
	return (&ConferenceClient{config: c.config}).QueryUsers(c)
}

// QueryCalls queries the calls edge of the Conference.
func (c *Conference) QueryCalls() *CallQuery {
	return (&ConferenceClient{config: c.config}).QueryCalls(c)
}

// Update returns a builder for updating this Conference.
// Note that, you need to call Conference.Unwrap() before calling this method, if this Conference
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Conference) Update() *ConferenceUpdateOne {
	return (&ConferenceClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Conference) Unwrap() *Conference {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Conference is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Conference) String() string {
	var builder strings.Builder
	builder.WriteString("Conference(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Conferences is a parsable slice of Conference.
type Conferences []*Conference

func (c Conferences) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
